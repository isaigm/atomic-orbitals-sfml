#include <math.h>
#include <iostream>
#include <stdio.h>
#include <SFML/Graphics.hpp>
#include <vector>
#define WIDTH 600
#define HEIGHT 600
#define M_PI 3.141592653f
/*
    Gracias a Eddxample, sin su codigo hubiera tardado 10 a√±os
    en implementar esta m4dre
*/
double factorial(int n)
{
    double p = 1;
    for (int i = 1; i <= n; i++)
    {
        p *= i;
    }
    return p;
}
double coef(int n, int k)
{
    return factorial(n) / (factorial(k) * factorial(n - k));
}
double laguerre(int n, int a, double x)
{
    double s = 0;
    for (int i = 0; i <= n; i++)
    {
        s += pow(-1, i) * coef(n + a, n - i) * pow(x, i) / factorial(i);
    }
    return s;
}
double gb(double a, int k)
{
    double p = 1;
    for (int i = 1; i <= k; i++)
    {
        p *= (a + 1 - i) / i;
    }
    return p;
}
double lpml(int m, int l, double x)
{
    double s = 0;
    for (int k = m; k <= l; k++)
    {
        s += (factorial(k) / factorial(k - m)) * pow(x, k - m) * gb(l, k) * gb((l + k - 1) / 2.0f, l);
    }
    return pow(-1, m) * pow(2, l) * pow(1 - x * x, m / 2.0f) * s;
}
double sharm(int m, int n, double theta, double phi)
{
    double r = lpml(m, n, cos(phi));
    double t1 = (2 * n + 1) * factorial(n - m);
    double t2 = 4 * M_PI * factorial(n + m);
    r *= sqrt(t1 / t2);
    double x = r * cos(m * theta);
    double y = r * sin(m * theta);
    return sqrt(x * x + y * y);
}
double get_prob(int n, int l, int m, double x, double y, double z)
{
    double r = sqrt(x * x + y * y + z * z);
    double theta = atan2(sqrt(x * x + y * y), z);
    double phi = atan2(y, x);
    double p = 2 * r / n;
    double phir = exp(-p) * pow(p, l) * laguerre(n - 1 - l, 2 * l + 1, 2 * p);
    double phit = sharm(m, l, theta, phi);
    return 4 * M_PI * r * r * phir * phir * phit * phit;
}
void gen_orbital(sf::RenderTexture& rt, std::vector<sf::Color> &colors, int n, int l, int m)
{
    double min = INT_MAX;
    double max = INT_MIN;
    double startx = -25.0f;
    double endx = 25.0f;
    double starty = -25.0f;
    double endy = 25.0f;
    double lenx = endx - startx;
    double leny = endy - starty;
    double dx = lenx / WIDTH;
    double dy = leny / HEIGHT;
    
    for (double x = startx; x <= endx; x += dx)
    {
        for (double y = starty; y <= endy; y += dy)
        {
            auto p = get_prob(n, l, m, y, x, 0);
            min = std::min(p, min);
            max = std::max(p, max);
        }
    }
    rt.clear();
    for (double x = startx; x <= endx; x += dx)
    {
        for (double y = starty; y <= endy; y += dy)
        {
            auto p = get_prob(n, l, m, y, x, 0);
            sf::Vertex point;
            point.position.x = (x + abs(startx)) * WIDTH / lenx;
            point.position.y = HEIGHT - (y + abs(starty)) * HEIGHT / leny;
            int idx = int((colors.size() - 1) / (max - min) * (p - min));
            point.color = colors[idx];
            rt.draw(&point, 1, sf::Points);
        }
    }
    rt.display();
}
int main()
{
    std::vector<sf::Color> colors;
    colors.push_back(sf::Color(0x20102FF));
    colors.push_back(sf::Color(0x20103FF));
    colors.push_back(sf::Color(0x30104FF));
    colors.push_back(sf::Color(0x30104FF));
    colors.push_back(sf::Color(0x40205FF));
    colors.push_back(sf::Color(0x50207FF));
    colors.push_back(sf::Color(0x50207FF));
    colors.push_back(sf::Color(0x60209FF));
    colors.push_back(sf::Color(0x7030AFF));
    colors.push_back(sf::Color(0x8030BFF));
    colors.push_back(sf::Color(0x8030CFF));
    colors.push_back(sf::Color(0x9030CFF));
    colors.push_back(sf::Color(0x9030DFF));
    colors.push_back(sf::Color(0xA040EFF));
    colors.push_back(sf::Color(0xB040FFF));
    colors.push_back(sf::Color(0xB040FFF));
    colors.push_back(sf::Color(0xC0410FF));
    colors.push_back(sf::Color(0xC0410FF));
    colors.push_back(sf::Color(0xD0411FF));
    colors.push_back(sf::Color(0xD0512FF));
    colors.push_back(sf::Color(0xE0512FF));
    colors.push_back(sf::Color(0xE0513FF));
    colors.push_back(sf::Color(0xF0514FF));
    colors.push_back(sf::Color(0x100616FF));
    colors.push_back(sf::Color(0x110617FF));
    colors.push_back(sf::Color(0x120619FF));
    colors.push_back(sf::Color(0x13071AFF));
    colors.push_back(sf::Color(0x13071BFF));
    colors.push_back(sf::Color(0x13071BFF));
    colors.push_back(sf::Color(0x14071CFF));
    colors.push_back(sf::Color(0x14071CFF));
    colors.push_back(sf::Color(0x15071DFF));
    colors.push_back(sf::Color(0x15081EFF));
    colors.push_back(sf::Color(0x16081EFF));
    colors.push_back(sf::Color(0x16081FFF));
    colors.push_back(sf::Color(0x170820FF));
    colors.push_back(sf::Color(0x170821FF));
    colors.push_back(sf::Color(0x180921FF));
    colors.push_back(sf::Color(0x180922FF));
    colors.push_back(sf::Color(0x180922FF));
    colors.push_back(sf::Color(0x190923FF));
    colors.push_back(sf::Color(0x1A0924FF));
    colors.push_back(sf::Color(0x1B0A25FF));
    colors.push_back(sf::Color(0x1C0A26FF));
    colors.push_back(sf::Color(0x1D0A28FF));
    colors.push_back(sf::Color(0x1E0B29FF));
    colors.push_back(sf::Color(0x1F0B2AFF));
    colors.push_back(sf::Color(0x1F0B2BFF));
    colors.push_back(sf::Color(0x200B2BFF));
    colors.push_back(sf::Color(0x200B2CFF));
    colors.push_back(sf::Color(0x200B2CFF));
    colors.push_back(sf::Color(0x210C2DFF));
    colors.push_back(sf::Color(0x220C2EFF));
    colors.push_back(sf::Color(0x220C2FFF));
    colors.push_back(sf::Color(0x230C30FF));
    colors.push_back(sf::Color(0x230C30FF));
    colors.push_back(sf::Color(0x240D31FF));
    colors.push_back(sf::Color(0x240D32FF));
    colors.push_back(sf::Color(0x250D32FF));
    colors.push_back(sf::Color(0x260D33FF));
    colors.push_back(sf::Color(0x270E34FF));
    colors.push_back(sf::Color(0x270E35FF));
    colors.push_back(sf::Color(0x280E37FF));
    colors.push_back(sf::Color(0x290E38FF));
    colors.push_back(sf::Color(0x2A0F39FF));
    colors.push_back(sf::Color(0x2A0F3AFF));
    colors.push_back(sf::Color(0x2B0F3BFF));
    colors.push_back(sf::Color(0x2B0F3BFF));
    colors.push_back(sf::Color(0x2C0F3CFF));
    colors.push_back(sf::Color(0x2C103DFF));
    colors.push_back(sf::Color(0x2D103EFF));
    colors.push_back(sf::Color(0x2D103FFF));
    colors.push_back(sf::Color(0x2D103FFF));
    colors.push_back(sf::Color(0x2E103FFF));
    colors.push_back(sf::Color(0x2F1040FF));
    colors.push_back(sf::Color(0x2F1141FF));
    colors.push_back(sf::Color(0x301142FF));
    colors.push_back(sf::Color(0x301142FF));
    colors.push_back(sf::Color(0x311143FF));
    colors.push_back(sf::Color(0x321245FF));
    colors.push_back(sf::Color(0x331246FF));
    colors.push_back(sf::Color(0x341247FF));
    colors.push_back(sf::Color(0x351349FF));
    colors.push_back(sf::Color(0x351349FF));
    colors.push_back(sf::Color(0x36134AFF));
    colors.push_back(sf::Color(0x37134AFF));
    colors.push_back(sf::Color(0x37134BFF));
    colors.push_back(sf::Color(0x38134BFF));
    colors.push_back(sf::Color(0x38144CFF));
    colors.push_back(sf::Color(0x39144DFF));
    colors.push_back(sf::Color(0x39144EFF));
    colors.push_back(sf::Color(0x3A144EFF));
    colors.push_back(sf::Color(0x3A154FFF));
    colors.push_back(sf::Color(0x3B1550FF));
    colors.push_back(sf::Color(0x3B1550FF));
    colors.push_back(sf::Color(0x3B1551FF));
    colors.push_back(sf::Color(0x3C1551FF));
    colors.push_back(sf::Color(0x3D1652FF));
    colors.push_back(sf::Color(0x3E1654FF));
    colors.push_back(sf::Color(0x3F1655FF));
    colors.push_back(sf::Color(0x401757FF));
    colors.push_back(sf::Color(0x401758FF));
    colors.push_back(sf::Color(0x411759FF));
    colors.push_back(sf::Color(0x42185AFF));
    colors.push_back(sf::Color(0x42185AFF));
    colors.push_back(sf::Color(0x42185AFF));
    colors.push_back(sf::Color(0x43185BFF));
    colors.push_back(sf::Color(0x43195CFF));
    colors.push_back(sf::Color(0x44195DFF));
    colors.push_back(sf::Color(0x45195EFF));
    colors.push_back(sf::Color(0x45195FFF));
    colors.push_back(sf::Color(0x461A5FFF));
    colors.push_back(sf::Color(0x461A60FF));
    colors.push_back(sf::Color(0x471A61FF));
    colors.push_back(sf::Color(0x471A61FF));
    colors.push_back(sf::Color(0x481A62FF));
    colors.push_back(sf::Color(0x481A63FF));
    colors.push_back(sf::Color(0x491B64FF));
    colors.push_back(sf::Color(0x4B1B66FF));
    colors.push_back(sf::Color(0x4C1B67FF));
    colors.push_back(sf::Color(0x4C1C68FF));
    colors.push_back(sf::Color(0x4D1C69FF));
    colors.push_back(sf::Color(0x4E1C69FF));
    colors.push_back(sf::Color(0x4E1C6AFF));
    colors.push_back(sf::Color(0x4F1C6AFF));
    colors.push_back(sf::Color(0x4F1D6BFF));
    colors.push_back(sf::Color(0x501D6CFF));
    colors.push_back(sf::Color(0x501D6CFF));
    colors.push_back(sf::Color(0x501D6DFF));
    colors.push_back(sf::Color(0x511D6EFF));
    colors.push_back(sf::Color(0x511E6EFF));
    colors.push_back(sf::Color(0x521E6FFF));
    colors.push_back(sf::Color(0x521E70FF));
    colors.push_back(sf::Color(0x531E71FF));
    colors.push_back(sf::Color(0x541E72FF));
    colors.push_back(sf::Color(0x551F73FF));
    colors.push_back(sf::Color(0x561F74FF));
    colors.push_back(sf::Color(0x571F76FF));
    colors.push_back(sf::Color(0x571F76FF));
    colors.push_back(sf::Color(0x572077FF));
    colors.push_back(sf::Color(0x582078FF));
    colors.push_back(sf::Color(0x592079FF));
    colors.push_back(sf::Color(0x59207AFF));
    colors.push_back(sf::Color(0x5A207AFF));
    colors.push_back(sf::Color(0x5A217BFF));
    colors.push_back(sf::Color(0x5B217CFF));
    colors.push_back(sf::Color(0x5C217DFF));
    colors.push_back(sf::Color(0x5C217DFF));
    colors.push_back(sf::Color(0x5D227DFF));
    colors.push_back(sf::Color(0x5D227DFF));
    colors.push_back(sf::Color(0x5D227EFF));
    colors.push_back(sf::Color(0x5E227EFF));
    colors.push_back(sf::Color(0x5F227EFF));
    colors.push_back(sf::Color(0x5F227FFF));
    colors.push_back(sf::Color(0x61237FFF));
    colors.push_back(sf::Color(0x62237FFF));
    colors.push_back(sf::Color(0x63247EFF));
    colors.push_back(sf::Color(0x63247EFF));
    colors.push_back(sf::Color(0x64247EFF));
    colors.push_back(sf::Color(0x65247EFF));
    colors.push_back(sf::Color(0x65247DFF));
    colors.push_back(sf::Color(0x66257DFF));
    colors.push_back(sf::Color(0x67257CFF));
    colors.push_back(sf::Color(0x68257CFF));
    colors.push_back(sf::Color(0x69267BFF));
    colors.push_back(sf::Color(0x6A267BFF));
    colors.push_back(sf::Color(0x6B267AFF));
    colors.push_back(sf::Color(0x6B267AFF));
    colors.push_back(sf::Color(0x6C267AFF));
    colors.push_back(sf::Color(0x6D2779FF));
    colors.push_back(sf::Color(0x6E2779FF));
    colors.push_back(sf::Color(0x6E2779FF));
    colors.push_back(sf::Color(0x6E2779FF));
    colors.push_back(sf::Color(0x6F2778FF));
    colors.push_back(sf::Color(0x702778FF));
    colors.push_back(sf::Color(0x702878FF));
    colors.push_back(sf::Color(0x702877FF));
    colors.push_back(sf::Color(0x712877FF));
    colors.push_back(sf::Color(0x722876FF));
    colors.push_back(sf::Color(0x732976FF));
    colors.push_back(sf::Color(0x742975FF));
    colors.push_back(sf::Color(0x752974FF));
    colors.push_back(sf::Color(0x752974FF));
    colors.push_back(sf::Color(0x762A74FF));
    colors.push_back(sf::Color(0x772A73FF));
    colors.push_back(sf::Color(0x782A73FF));
    colors.push_back(sf::Color(0x782A72FF));
    colors.push_back(sf::Color(0x792A72FF));
    colors.push_back(sf::Color(0x7A2B72FF));
    colors.push_back(sf::Color(0x7B2B71FF));
    colors.push_back(sf::Color(0x7B2B71FF));
    colors.push_back(sf::Color(0x7C2B70FF));
    colors.push_back(sf::Color(0x7D2B70FF));
    colors.push_back(sf::Color(0x7D2B70FF));
    colors.push_back(sf::Color(0x7D2B70FF));
    colors.push_back(sf::Color(0x7D2B70FF));
    colors.push_back(sf::Color(0x7E2B6FFF));
    colors.push_back(sf::Color(0x7F2C6FFF));
    colors.push_back(sf::Color(0x802C6EFF));
    colors.push_back(sf::Color(0x812C6EFF));
    colors.push_back(sf::Color(0x822C6DFF));
    colors.push_back(sf::Color(0x832D6CFF));
    colors.push_back(sf::Color(0x842D6CFF));
    colors.push_back(sf::Color(0x842D6CFF));
    colors.push_back(sf::Color(0x842D6BFF));
    colors.push_back(sf::Color(0x852D6BFF));
    colors.push_back(sf::Color(0x852D6BFF));
    colors.push_back(sf::Color(0x862E6BFF));
    colors.push_back(sf::Color(0x862E6AFF));
    colors.push_back(sf::Color(0x872E6AFF));
    colors.push_back(sf::Color(0x882E69FF));
    colors.push_back(sf::Color(0x892E69FF));
    colors.push_back(sf::Color(0x892F69FF));
    colors.push_back(sf::Color(0x8A2F69FF));
    colors.push_back(sf::Color(0x8B2F68FF));
    colors.push_back(sf::Color(0x8B2F68FF));
    colors.push_back(sf::Color(0x8C2F68FF));
    colors.push_back(sf::Color(0x8D3067FF));
    colors.push_back(sf::Color(0x8E3067FF));
    colors.push_back(sf::Color(0x8F3066FF));
    colors.push_back(sf::Color(0x903165FF));
    colors.push_back(sf::Color(0x913165FF));
    colors.push_back(sf::Color(0x923165FF));
    colors.push_back(sf::Color(0x923164FF));
    colors.push_back(sf::Color(0x923164FF));
    colors.push_back(sf::Color(0x933264FF));
    colors.push_back(sf::Color(0x933263FF));
    colors.push_back(sf::Color(0x943263FF));
    colors.push_back(sf::Color(0x943263FF));
    colors.push_back(sf::Color(0x953262FF));
    colors.push_back(sf::Color(0x963262FF));
    colors.push_back(sf::Color(0x963361FF));
    colors.push_back(sf::Color(0x973361FF));
    colors.push_back(sf::Color(0x973361FF));
    colors.push_back(sf::Color(0x983360FF));
    colors.push_back(sf::Color(0x993460FF));
    colors.push_back(sf::Color(0x9A345FFF));
    colors.push_back(sf::Color(0x9B345EFF));
    colors.push_back(sf::Color(0x9C345EFF));
    colors.push_back(sf::Color(0x9D355EFF));
    colors.push_back(sf::Color(0x9D355EFF));
    colors.push_back(sf::Color(0x9E355DFF));
    colors.push_back(sf::Color(0x9F355DFF));
    colors.push_back(sf::Color(0x9F355DFF));
    colors.push_back(sf::Color(0xA0365CFF));
    colors.push_back(sf::Color(0xA1365CFF));
    colors.push_back(sf::Color(0xA1365CFF));
    colors.push_back(sf::Color(0xA2365BFF));
    colors.push_back(sf::Color(0xA2365BFF));
    colors.push_back(sf::Color(0xA3365BFF));
    colors.push_back(sf::Color(0xA3375AFF));
    colors.push_back(sf::Color(0xA4375AFF));
    colors.push_back(sf::Color(0xA4375AFF));
    colors.push_back(sf::Color(0xA53759FF));
    colors.push_back(sf::Color(0xA63859FF));
    colors.push_back(sf::Color(0xA73858FF));
    colors.push_back(sf::Color(0xA93857FF));
    colors.push_back(sf::Color(0xAA3957FF));
    colors.push_back(sf::Color(0xAA3956FF));
    colors.push_back(sf::Color(0xAA3956FF));
    colors.push_back(sf::Color(0xAB3956FF));
    colors.push_back(sf::Color(0xAC3956FF));
    colors.push_back(sf::Color(0xAC3956FF));
    colors.push_back(sf::Color(0xAD3A55FF));
    colors.push_back(sf::Color(0xAE3A55FF));
    colors.push_back(sf::Color(0xAF3A54FF));
    colors.push_back(sf::Color(0xAF3A54FF));
    colors.push_back(sf::Color(0xB03B54FF));
    colors.push_back(sf::Color(0xB03B53FF));
    colors.push_back(sf::Color(0xB13B53FF));
    colors.push_back(sf::Color(0xB13B52FF));
    colors.push_back(sf::Color(0xB13B52FF));
    colors.push_back(sf::Color(0xB23B52FF));
    colors.push_back(sf::Color(0xB33C51FF));
    colors.push_back(sf::Color(0xB43C51FF));
    colors.push_back(sf::Color(0xB63C50FF));
    colors.push_back(sf::Color(0xB63D4FFF));
    colors.push_back(sf::Color(0xB73D4FFF));
    colors.push_back(sf::Color(0xB83D4FFF));
    colors.push_back(sf::Color(0xB83D4EFF));
    colors.push_back(sf::Color(0xB93D4EFF));
    colors.push_back(sf::Color(0xB93D4DFF));
    colors.push_back(sf::Color(0xB93E4DFF));
    colors.push_back(sf::Color(0xBA3E4DFF));
    colors.push_back(sf::Color(0xBB3E4DFF));
    colors.push_back(sf::Color(0xBB3E4CFF));
    colors.push_back(sf::Color(0xBC3E4CFF));
    colors.push_back(sf::Color(0xBD3E4CFF));
    colors.push_back(sf::Color(0xBD3E4CFF));
    colors.push_back(sf::Color(0xBE3E4BFF));
    colors.push_back(sf::Color(0xBF3F4BFF));
    colors.push_back(sf::Color(0xC03F4AFF));
    colors.push_back(sf::Color(0xC03F4AFF));
    colors.push_back(sf::Color(0xC13F4AFF));
    colors.push_back(sf::Color(0xC23F49FF));
    colors.push_back(sf::Color(0xC34048FF));
    colors.push_back(sf::Color(0xC44048FF));
    colors.push_back(sf::Color(0xC54048FF));
    colors.push_back(sf::Color(0xC54047FF));
    colors.push_back(sf::Color(0xC64047FF));
    colors.push_back(sf::Color(0xC64146FF));
    colors.push_back(sf::Color(0xC74146FF));
    colors.push_back(sf::Color(0xC74146FF));
    colors.push_back(sf::Color(0xC74145FF));
    colors.push_back(sf::Color(0xC84245FF));
    colors.push_back(sf::Color(0xC84245FF));
    colors.push_back(sf::Color(0xC94245FF));
    colors.push_back(sf::Color(0xC94244FF));
    colors.push_back(sf::Color(0xC94344FF));
    colors.push_back(sf::Color(0xCA4344FF));
    colors.push_back(sf::Color(0xCB4443FF));
    colors.push_back(sf::Color(0xCB4442FF));
    colors.push_back(sf::Color(0xCC4542FF));
    colors.push_back(sf::Color(0xCC4541FF));
    colors.push_back(sf::Color(0xCC4541FF));
    colors.push_back(sf::Color(0xCD4641FF));
    colors.push_back(sf::Color(0xCD4640FF));
    colors.push_back(sf::Color(0xCD4640FF));
    colors.push_back(sf::Color(0xCD4640FF));
    colors.push_back(sf::Color(0xCE473FFF));
    colors.push_back(sf::Color(0xCE473FFF));
    colors.push_back(sf::Color(0xCE473EFF));
    colors.push_back(sf::Color(0xCF483EFF));
    colors.push_back(sf::Color(0xCF483EFF));
    colors.push_back(sf::Color(0xCF483EFF));
    colors.push_back(sf::Color(0xCF483DFF));
    colors.push_back(sf::Color(0xD0493DFF));
    colors.push_back(sf::Color(0xD0493DFF));
    colors.push_back(sf::Color(0xD0493CFF));
    colors.push_back(sf::Color(0xD14A3CFF));
    colors.push_back(sf::Color(0xD14A3BFF));
    colors.push_back(sf::Color(0xD24B3BFF));
    colors.push_back(sf::Color(0xD24B3AFF));
    colors.push_back(sf::Color(0xD34C3AFF));
    colors.push_back(sf::Color(0xD34C39FF));
    colors.push_back(sf::Color(0xD34C39FF));
    colors.push_back(sf::Color(0xD34C39FF));
    colors.push_back(sf::Color(0xD34C39FF));
    colors.push_back(sf::Color(0xD44D38FF));
    colors.push_back(sf::Color(0xD44D38FF));
    colors.push_back(sf::Color(0xD44D37FF));
    colors.push_back(sf::Color(0xD54E37FF));
    colors.push_back(sf::Color(0xD54E37FF));
    colors.push_back(sf::Color(0xD54E37FF));
    colors.push_back(sf::Color(0xD64F36FF));
    colors.push_back(sf::Color(0xD64F36FF));
    colors.push_back(sf::Color(0xD64F35FF));
    colors.push_back(sf::Color(0xD64F35FF));
    colors.push_back(sf::Color(0xD75035FF));
    colors.push_back(sf::Color(0xD75034FF));
    colors.push_back(sf::Color(0xD85134FF));
    colors.push_back(sf::Color(0xD85134FF));
    colors.push_back(sf::Color(0xD95233FF));
    colors.push_back(sf::Color(0xD95233FF));
    colors.push_back(sf::Color(0xD95232FF));
    colors.push_back(sf::Color(0xDA5332FF));
    colors.push_back(sf::Color(0xDA5331FF));
    colors.push_back(sf::Color(0xDB5430FF));
    colors.push_back(sf::Color(0xDB5430FF));
    colors.push_back(sf::Color(0xDB5430FF));
    colors.push_back(sf::Color(0xDC5530FF));
    colors.push_back(sf::Color(0xDC552FFF));
    colors.push_back(sf::Color(0xDC552FFF));
    colors.push_back(sf::Color(0xDC552FFF));
    colors.push_back(sf::Color(0xDD562EFF));
    colors.push_back(sf::Color(0xDD562EFF));
    colors.push_back(sf::Color(0xDD562DFF));
    colors.push_back(sf::Color(0xDE572DFF));
    colors.push_back(sf::Color(0xDE572DFF));
    colors.push_back(sf::Color(0xDE572DFF));
    colors.push_back(sf::Color(0xDE572DFF));
    colors.push_back(sf::Color(0xDF582CFF));
    colors.push_back(sf::Color(0xDF582CFF));
    colors.push_back(sf::Color(0xDF582BFF));
    colors.push_back(sf::Color(0xE0592BFF));
    colors.push_back(sf::Color(0xE0592AFF));
    colors.push_back(sf::Color(0xE15A2AFF));
    colors.push_back(sf::Color(0xE15A2AFF));
    colors.push_back(sf::Color(0xE25B29FF));
    colors.push_back(sf::Color(0xE25B29FF));
    colors.push_back(sf::Color(0xE25B29FF));
    colors.push_back(sf::Color(0xE25B29FF));
    colors.push_back(sf::Color(0xE25B28FF));
    colors.push_back(sf::Color(0xE35C28FF));
    colors.push_back(sf::Color(0xE35C28FF));
    colors.push_back(sf::Color(0xE35C27FF));
    colors.push_back(sf::Color(0xE45C27FF));
    colors.push_back(sf::Color(0xE45D26FF));
    colors.push_back(sf::Color(0xE45D26FF));
    colors.push_back(sf::Color(0xE55D26FF));
    colors.push_back(sf::Color(0xE55D25FF));
    colors.push_back(sf::Color(0xE55D25FF));
    colors.push_back(sf::Color(0xE55E25FF));
    colors.push_back(sf::Color(0xE65E24FF));
    colors.push_back(sf::Color(0xE65F23FF));
    colors.push_back(sf::Color(0xE75F23FF));
    colors.push_back(sf::Color(0xE75F23FF));
    colors.push_back(sf::Color(0xE86022FF));
    colors.push_back(sf::Color(0xE86022FF));
    colors.push_back(sf::Color(0xE86022FF));
    colors.push_back(sf::Color(0xE86021FF));
    colors.push_back(sf::Color(0xE96121FF));
    colors.push_back(sf::Color(0xE96121FF));
    colors.push_back(sf::Color(0xE96121FF));
    colors.push_back(sf::Color(0xE96120FF));
    colors.push_back(sf::Color(0xEA6220FF));
    colors.push_back(sf::Color(0xEA621FFF));
    colors.push_back(sf::Color(0xEA621FFF));
    colors.push_back(sf::Color(0xEB631FFF));
    colors.push_back(sf::Color(0xEB631EFF));
    colors.push_back(sf::Color(0xEB631EFF));
    colors.push_back(sf::Color(0xEC641DFF));
    colors.push_back(sf::Color(0xEC641CFF));
    colors.push_back(sf::Color(0xEC641CFF));
    colors.push_back(sf::Color(0xED651CFF));
    colors.push_back(sf::Color(0xED651CFF));
    colors.push_back(sf::Color(0xED661BFF));
    colors.push_back(sf::Color(0xED661BFF));
    colors.push_back(sf::Color(0xED661BFF));
    colors.push_back(sf::Color(0xEE661AFF));
    colors.push_back(sf::Color(0xEE671AFF));
    colors.push_back(sf::Color(0xEE671AFF));
    colors.push_back(sf::Color(0xEE6719FF));
    colors.push_back(sf::Color(0xEF6819FF));
    colors.push_back(sf::Color(0xEF6819FF));
    colors.push_back(sf::Color(0xEF6819FF));
    colors.push_back(sf::Color(0xEF6819FF));
    colors.push_back(sf::Color(0xF06918FF));
    colors.push_back(sf::Color(0xF06918FF));
    colors.push_back(sf::Color(0xF06917FF));
    colors.push_back(sf::Color(0xF16A17FF));
    colors.push_back(sf::Color(0xF26B16FF));
    colors.push_back(sf::Color(0xF26B15FF));
    colors.push_back(sf::Color(0xF26B15FF));
    colors.push_back(sf::Color(0xF36C15FF));
    colors.push_back(sf::Color(0xF36C14FF));
    colors.push_back(sf::Color(0xF36C14FF));
    colors.push_back(sf::Color(0xF36C14FF));
    colors.push_back(sf::Color(0xF36C13FF));
    colors.push_back(sf::Color(0xF46D13FF));
    colors.push_back(sf::Color(0xF46D13FF));
    colors.push_back(sf::Color(0xF46D12FF));
    colors.push_back(sf::Color(0xF56E12FF));
    colors.push_back(sf::Color(0xF56E12FF));
    colors.push_back(sf::Color(0xF56E12FF));
    colors.push_back(sf::Color(0xF66F11FF));
    colors.push_back(sf::Color(0xF66F11FF));
    colors.push_back(sf::Color(0xF66F11FF));
    colors.push_back(sf::Color(0xF77010FF));
    colors.push_back(sf::Color(0xF77010FF));
    colors.push_back(sf::Color(0xF8710FFF));
    colors.push_back(sf::Color(0xF8710FFF));
    colors.push_back(sf::Color(0xF9720EFF));
    colors.push_back(sf::Color(0xF9720EFF));
    colors.push_back(sf::Color(0xF9720EFF));
    colors.push_back(sf::Color(0xF9720DFF));
    colors.push_back(sf::Color(0xFA730DFF));
    colors.push_back(sf::Color(0xFA730DFF));
    colors.push_back(sf::Color(0xFA730DFF));
    colors.push_back(sf::Color(0xFA730DFF));
    colors.push_back(sf::Color(0xFA740DFF));
    colors.push_back(sf::Color(0xFA740DFF));
    colors.push_back(sf::Color(0xFA750DFF));
    colors.push_back(sf::Color(0xFA750DFF));
    colors.push_back(sf::Color(0xFA750DFF));
    colors.push_back(sf::Color(0xFB760EFF));
    colors.push_back(sf::Color(0xFB770EFF));
    colors.push_back(sf::Color(0xFB770EFF));
    colors.push_back(sf::Color(0xFB770EFF));
    colors.push_back(sf::Color(0xFB780EFF));
    colors.push_back(sf::Color(0xFB780EFF));
    colors.push_back(sf::Color(0xFB790EFF));
    colors.push_back(sf::Color(0xFB790FFF));
    colors.push_back(sf::Color(0xFB790FFF));
    colors.push_back(sf::Color(0xFB790FFF));
    colors.push_back(sf::Color(0xFB7A0FFF));
    colors.push_back(sf::Color(0xFB7A0FFF));
    colors.push_back(sf::Color(0xFB7A0FFF));
    colors.push_back(sf::Color(0xFB7B0FFF));
    colors.push_back(sf::Color(0xFB7B0FFF));
    colors.push_back(sf::Color(0xFB7B0FFF));
    colors.push_back(sf::Color(0xFB7C0FFF));
    colors.push_back(sf::Color(0xFB7C0FFF));
    colors.push_back(sf::Color(0xFB7C10FF));
    colors.push_back(sf::Color(0xFB7D10FF));
    colors.push_back(sf::Color(0xFB7E10FF));
    colors.push_back(sf::Color(0xFB7E10FF));
    colors.push_back(sf::Color(0xFB7F10FF));
    colors.push_back(sf::Color(0xFB7F10FF));
    colors.push_back(sf::Color(0xFB8010FF));
    colors.push_back(sf::Color(0xFB8010FF));
    colors.push_back(sf::Color(0xFB8011FF));
    colors.push_back(sf::Color(0xFB8011FF));
    colors.push_back(sf::Color(0xFB8011FF));
    colors.push_back(sf::Color(0xFB8111FF));
    colors.push_back(sf::Color(0xFB8111FF));
    colors.push_back(sf::Color(0xFB8111FF));
    colors.push_back(sf::Color(0xFB8211FF));
    colors.push_back(sf::Color(0xFB8212FF));
    colors.push_back(sf::Color(0xFB8312FF));
    colors.push_back(sf::Color(0xFB8312FF));
    colors.push_back(sf::Color(0xFB8312FF));
    colors.push_back(sf::Color(0xFC8312FF));
    colors.push_back(sf::Color(0xFC8412FF));
    colors.push_back(sf::Color(0xFC8513FF));
    colors.push_back(sf::Color(0xFC8513FF));
    colors.push_back(sf::Color(0xFC8613FF));
    colors.push_back(sf::Color(0xFC8613FF));
    colors.push_back(sf::Color(0xFC8713FF));
    colors.push_back(sf::Color(0xFC8714FF));
    colors.push_back(sf::Color(0xFC8714FF));
    colors.push_back(sf::Color(0xFC8714FF));
    colors.push_back(sf::Color(0xFC8714FF));
    colors.push_back(sf::Color(0xFC8814FF));
    colors.push_back(sf::Color(0xFC8814FF));
    colors.push_back(sf::Color(0xFC8814FF));
    colors.push_back(sf::Color(0xFC8914FF));
    colors.push_back(sf::Color(0xFC8914FF));
    colors.push_back(sf::Color(0xFC8A14FF));
    colors.push_back(sf::Color(0xFC8A14FF));
    colors.push_back(sf::Color(0xFC8A15FF));
    colors.push_back(sf::Color(0xFC8B15FF));
    colors.push_back(sf::Color(0xFC8C15FF));
    colors.push_back(sf::Color(0xFC8C15FF));
    colors.push_back(sf::Color(0xFC8C15FF));
    colors.push_back(sf::Color(0xFC8D15FF));
    colors.push_back(sf::Color(0xFC8D15FF));
    colors.push_back(sf::Color(0xFC8E15FF));
    colors.push_back(sf::Color(0xFD8E16FF));
    colors.push_back(sf::Color(0xFD8E16FF));
    colors.push_back(sf::Color(0xFD8E16FF));
    colors.push_back(sf::Color(0xFD8F16FF));
    colors.push_back(sf::Color(0xFD8F16FF));
    colors.push_back(sf::Color(0xFD9016FF));
    colors.push_back(sf::Color(0xFD9016FF));
    colors.push_back(sf::Color(0xFD9016FF));
    colors.push_back(sf::Color(0xFD9016FF));
    colors.push_back(sf::Color(0xFD9116FF));
    colors.push_back(sf::Color(0xFD9116FF));
    colors.push_back(sf::Color(0xFD9117FF));
    colors.push_back(sf::Color(0xFD9217FF));
    colors.push_back(sf::Color(0xFD9317FF));
    colors.push_back(sf::Color(0xFD9417FF));
    colors.push_back(sf::Color(0xFD9418FF));
    colors.push_back(sf::Color(0xFD9518FF));
    colors.push_back(sf::Color(0xFD9518FF));
    colors.push_back(sf::Color(0xFD9518FF));
    colors.push_back(sf::Color(0xFD9618FF));
    colors.push_back(sf::Color(0xFD9618FF));
    colors.push_back(sf::Color(0xFD9719FF));
    colors.push_back(sf::Color(0xFD9719FF));
    colors.push_back(sf::Color(0xFD9819FF));
    colors.push_back(sf::Color(0xFD9819FF));
    colors.push_back(sf::Color(0xFD9919FF));
    colors.push_back(sf::Color(0xFE991AFF));
    colors.push_back(sf::Color(0xFE991AFF));
    colors.push_back(sf::Color(0xFE991AFF));
    colors.push_back(sf::Color(0xFE991AFF));
    colors.push_back(sf::Color(0xFE9A1AFF));
    colors.push_back(sf::Color(0xFE9A1AFF));
    colors.push_back(sf::Color(0xFE9B1AFF));
    colors.push_back(sf::Color(0xFE9B1AFF));
    colors.push_back(sf::Color(0xFE9B1AFF));
    colors.push_back(sf::Color(0xFE9C1AFF));
    colors.push_back(sf::Color(0xFE9C1AFF));
    colors.push_back(sf::Color(0xFE9D1BFF));
    colors.push_back(sf::Color(0xFE9D1BFF));
    colors.push_back(sf::Color(0xFE9D1BFF));
    colors.push_back(sf::Color(0xFE9E1BFF));
    colors.push_back(sf::Color(0xFE9E1BFF));
    colors.push_back(sf::Color(0xFE9F1BFF));
    colors.push_back(sf::Color(0xFE9F1BFF));
    colors.push_back(sf::Color(0xFEA01BFF));
    colors.push_back(sf::Color(0xFEA01CFF));
    colors.push_back(sf::Color(0xFEA01CFF));
    colors.push_back(sf::Color(0xFEA01CFF));
    colors.push_back(sf::Color(0xFEA11CFF));
    colors.push_back(sf::Color(0xFEA11CFF));
    colors.push_back(sf::Color(0xFEA11CFF));
    colors.push_back(sf::Color(0xFEA21CFF));
    colors.push_back(sf::Color(0xFEA21CFF));
    colors.push_back(sf::Color(0xFEA21CFF));
    colors.push_back(sf::Color(0xFEA31CFF));
    colors.push_back(sf::Color(0xFEA31CFF));
    colors.push_back(sf::Color(0xFFA41DFF));
    colors.push_back(sf::Color(0xFFA41DFF));
    colors.push_back(sf::Color(0xFFA51DFF));
    colors.push_back(sf::Color(0xFFA51DFF));
    colors.push_back(sf::Color(0xFFA61EFF));
    colors.push_back(sf::Color(0xFFA61EFF));
    colors.push_back(sf::Color(0xFFA61EFF));
    colors.push_back(sf::Color(0xFFA71EFF));
    colors.push_back(sf::Color(0xFFA71EFF));
    colors.push_back(sf::Color(0xFFA71EFF));
    colors.push_back(sf::Color(0xFFA71FFF));
    colors.push_back(sf::Color(0xFFA81FFF));
    colors.push_back(sf::Color(0xFFA81FFF));
    colors.push_back(sf::Color(0xFFA91FFF));
    colors.push_back(sf::Color(0xFFA91FFF));
    colors.push_back(sf::Color(0xFFA91FFF));
    colors.push_back(sf::Color(0xFFA91FFF));
    colors.push_back(sf::Color(0xFFAA1FFF));
    colors.push_back(sf::Color(0xFFAA20FF));
    colors.push_back(sf::Color(0xFFAB20FF));
    colors.push_back(sf::Color(0xFFAB20FF));
    colors.push_back(sf::Color(0xFFAC20FF));
    colors.push_back(sf::Color(0xFFAD21FF));
    colors.push_back(sf::Color(0xFFAD21FF));
    colors.push_back(sf::Color(0xFFAD21FF));
    colors.push_back(sf::Color(0xFFAE22FF));
    colors.push_back(sf::Color(0xFFAE22FF));
    colors.push_back(sf::Color(0xFFAE22FF));
    colors.push_back(sf::Color(0xFFAE22FF));
    colors.push_back(sf::Color(0xFFAF23FF));
    colors.push_back(sf::Color(0xFFAF23FF));
    colors.push_back(sf::Color(0xFFAF23FF));
    colors.push_back(sf::Color(0xFFAF24FF));
    colors.push_back(sf::Color(0xFFB024FF));
    colors.push_back(sf::Color(0xFFB025FF));
    colors.push_back(sf::Color(0xFFB025FF));
    colors.push_back(sf::Color(0xFFB126FF));
    colors.push_back(sf::Color(0xFFB127FF));
    colors.push_back(sf::Color(0xFFB127FF));
    colors.push_back(sf::Color(0xFFB228FF));
    colors.push_back(sf::Color(0xFFB229FF));
    colors.push_back(sf::Color(0xFFB32AFF));
    colors.push_back(sf::Color(0xFFB32AFF));
    colors.push_back(sf::Color(0xFFB42BFF));
    colors.push_back(sf::Color(0xFFB42CFF));
    colors.push_back(sf::Color(0xFFB42CFF));
    colors.push_back(sf::Color(0xFFB42DFF));
    colors.push_back(sf::Color(0xFFB52DFF));
    colors.push_back(sf::Color(0xFFB52EFF));
    colors.push_back(sf::Color(0xFFB52EFF));
    colors.push_back(sf::Color(0xFFB52EFF));
    colors.push_back(sf::Color(0xFFB52FFF));
    colors.push_back(sf::Color(0xFFB62FFF));
    colors.push_back(sf::Color(0xFFB630FF));
    colors.push_back(sf::Color(0xFFB630FF));
    colors.push_back(sf::Color(0xFFB731FF));
    colors.push_back(sf::Color(0xFFB732FF));
    colors.push_back(sf::Color(0xFFB833FF));
    colors.push_back(sf::Color(0xFFB834FF));
    colors.push_back(sf::Color(0xFFB935FF));
    colors.push_back(sf::Color(0xFFB935FF));
    colors.push_back(sf::Color(0xFFB935FF));
    colors.push_back(sf::Color(0xFFBA36FF));
    colors.push_back(sf::Color(0xFFBA37FF));
    colors.push_back(sf::Color(0xFFBB37FF));
    colors.push_back(sf::Color(0xFFBB38FF));
    colors.push_back(sf::Color(0xFFBB38FF));
    colors.push_back(sf::Color(0xFFBC39FF));
    colors.push_back(sf::Color(0xFFBC3AFF));
    colors.push_back(sf::Color(0xFFBD3AFF));
    colors.push_back(sf::Color(0xFFBD3BFF));
    colors.push_back(sf::Color(0xFFBD3BFF));
    colors.push_back(sf::Color(0xFFBD3BFF));
    colors.push_back(sf::Color(0xFFBD3BFF));
    colors.push_back(sf::Color(0xFFBE3CFF));
    colors.push_back(sf::Color(0xFFBE3DFF));
    colors.push_back(sf::Color(0xFFBF3EFF));
    colors.push_back(sf::Color(0xFFBF3FFF));
    colors.push_back(sf::Color(0xFFC040FF));
    colors.push_back(sf::Color(0xFFC041FF));
    colors.push_back(sf::Color(0xFFC141FF));
    colors.push_back(sf::Color(0xFFC142FF));
    colors.push_back(sf::Color(0xFFC142FF));
    colors.push_back(sf::Color(0xFFC142FF));
    colors.push_back(sf::Color(0xFFC143FF));
    colors.push_back(sf::Color(0xFFC243FF));
    colors.push_back(sf::Color(0xFFC244FF));
    colors.push_back(sf::Color(0xFFC245FF));
    colors.push_back(sf::Color(0xFFC345FF));
    colors.push_back(sf::Color(0xFFC346FF));
    colors.push_back(sf::Color(0xFFC346FF));
    colors.push_back(sf::Color(0xFFC446FF));
    colors.push_back(sf::Color(0xFFC447FF));
    colors.push_back(sf::Color(0xFFC447FF));
    colors.push_back(sf::Color(0xFFC448FF));
    colors.push_back(sf::Color(0xFFC549FF));
    colors.push_back(sf::Color(0xFFC54AFF));
    colors.push_back(sf::Color(0xFFC64BFF));
    colors.push_back(sf::Color(0xFFC64CFF));
    colors.push_back(sf::Color(0xFFC74CFF));
    colors.push_back(sf::Color(0xFFC74DFF));
    colors.push_back(sf::Color(0xFFC74DFF));
    colors.push_back(sf::Color(0xFFC74EFF));
    colors.push_back(sf::Color(0xFFC84FFF));
    colors.push_back(sf::Color(0xFFC84FFF));
    colors.push_back(sf::Color(0xFFC84FFF));
    colors.push_back(sf::Color(0xFFC850FF));
    colors.push_back(sf::Color(0xFFC950FF));
    colors.push_back(sf::Color(0xFFC951FF));
    colors.push_back(sf::Color(0xFFC951FF));
    colors.push_back(sf::Color(0xFFCA52FF));
    colors.push_back(sf::Color(0xFFCA53FF));
    colors.push_back(sf::Color(0xFFCA53FF));
    colors.push_back(sf::Color(0xFFCB54FF));
    colors.push_back(sf::Color(0xFFCB55FF));
    colors.push_back(sf::Color(0xFFCB56FF));
    colors.push_back(sf::Color(0xFFCC56FF));
    colors.push_back(sf::Color(0xFFCC57FF));
    colors.push_back(sf::Color(0xFFCD58FF));
    colors.push_back(sf::Color(0xFFCD58FF));
    colors.push_back(sf::Color(0xFFCD59FF));
    colors.push_back(sf::Color(0xFFCD59FF));
    colors.push_back(sf::Color(0xFFCE5AFF));
    colors.push_back(sf::Color(0xFFCE5AFF));
    colors.push_back(sf::Color(0xFFCE5BFF));
    colors.push_back(sf::Color(0xFFCF5BFF));
    colors.push_back(sf::Color(0xFFCF5BFF));
    colors.push_back(sf::Color(0xFFCF5CFF));
    colors.push_back(sf::Color(0xFFCF5CFF));
    colors.push_back(sf::Color(0xFFD05DFF));
    colors.push_back(sf::Color(0xFFD05EFF));
    colors.push_back(sf::Color(0xFFD05FFF));
    colors.push_back(sf::Color(0xFFD160FF));
    colors.push_back(sf::Color(0xFFD161FF));
    colors.push_back(sf::Color(0xFFD261FF));
    colors.push_back(sf::Color(0xFFD262FF));
    colors.push_back(sf::Color(0xFFD363FF));
    colors.push_back(sf::Color(0xFFD363FF));
    colors.push_back(sf::Color(0xFFD363FF));
    colors.push_back(sf::Color(0xFFD364FF));
    colors.push_back(sf::Color(0xFFD465FF));
    colors.push_back(sf::Color(0xFFD466FF));
    colors.push_back(sf::Color(0xFFD567FF));
    colors.push_back(sf::Color(0xFFD568FF));
    colors.push_back(sf::Color(0xFFD668FF));
    colors.push_back(sf::Color(0xFFD669FF));
    colors.push_back(sf::Color(0xFFD66AFF));
    colors.push_back(sf::Color(0xFFD66AFF));
    colors.push_back(sf::Color(0xFFD66AFF));
    colors.push_back(sf::Color(0xFFD76BFF));
    colors.push_back(sf::Color(0xFFD76BFF));
    colors.push_back(sf::Color(0xFFD76CFF));
    colors.push_back(sf::Color(0xFFD86CFF));
    colors.push_back(sf::Color(0xFFD86DFF));
    colors.push_back(sf::Color(0xFFD86DFF));
    colors.push_back(sf::Color(0xFFD96EFF));
    colors.push_back(sf::Color(0xFFD96FFF));
    colors.push_back(sf::Color(0xFFD96FFF));
    colors.push_back(sf::Color(0xFFDA70FF));
    colors.push_back(sf::Color(0xFFDA71FF));
    colors.push_back(sf::Color(0xFFDA72FF));
    colors.push_back(sf::Color(0xFFDB72FF));
    colors.push_back(sf::Color(0xFFDB73FF));
    colors.push_back(sf::Color(0xFFDC74FF));
    colors.push_back(sf::Color(0xFFDC74FF));
    colors.push_back(sf::Color(0xFFDC75FF));
    colors.push_back(sf::Color(0xFFDC75FF));
    colors.push_back(sf::Color(0xFFDD76FF));
    colors.push_back(sf::Color(0xFFDD76FF));
    colors.push_back(sf::Color(0xFFDD77FF));
    colors.push_back(sf::Color(0xFFDD77FF));
    colors.push_back(sf::Color(0xFFDE77FF));
    colors.push_back(sf::Color(0xFFDE78FF));
    colors.push_back(sf::Color(0xFFDE78FF));
    colors.push_back(sf::Color(0xFFDF79FF));
    colors.push_back(sf::Color(0xFFDF7AFF));
    colors.push_back(sf::Color(0xFFDF7BFF));
    colors.push_back(sf::Color(0xFFE07CFF));
    colors.push_back(sf::Color(0xFFE07DFF));
    colors.push_back(sf::Color(0xFFE17EFF));
    colors.push_back(sf::Color(0xFFE17EFF));
    colors.push_back(sf::Color(0xFFE17EFF));
    colors.push_back(sf::Color(0xFFE27FFF));
    colors.push_back(sf::Color(0xFFE280FF));
    colors.push_back(sf::Color(0xFFE280FF));
    colors.push_back(sf::Color(0xFFE281FF));
    colors.push_back(sf::Color(0xFFE382FF));
    colors.push_back(sf::Color(0xFFE383FF));
    colors.push_back(sf::Color(0xFFE383FF));
    colors.push_back(sf::Color(0xFFE384FF));
    colors.push_back(sf::Color(0xFFE385FF));
    colors.push_back(sf::Color(0xFFE386FF));
    colors.push_back(sf::Color(0xFFE386FF));
    colors.push_back(sf::Color(0xFFE386FF));
    colors.push_back(sf::Color(0xFFE488FF));
    colors.push_back(sf::Color(0xFFE489FF));
    colors.push_back(sf::Color(0xFFE48BFF));
    colors.push_back(sf::Color(0xFFE48CFF));
    colors.push_back(sf::Color(0xFFE58DFF));
    colors.push_back(sf::Color(0xFFE58EFF));
    colors.push_back(sf::Color(0xFFE58FFF));
    colors.push_back(sf::Color(0xFFE58FFF));
    colors.push_back(sf::Color(0xFFE590FF));
    colors.push_back(sf::Color(0xFFE590FF));
    colors.push_back(sf::Color(0xFFE691FF));
    colors.push_back(sf::Color(0xFFE692FF));
    colors.push_back(sf::Color(0xFFE693FF));
    colors.push_back(sf::Color(0xFFE694FF));
    colors.push_back(sf::Color(0xFFE794FF));
    colors.push_back(sf::Color(0xFFE795FF));
    colors.push_back(sf::Color(0xFFE796FF));
    colors.push_back(sf::Color(0xFFE797FF));
    colors.push_back(sf::Color(0xFFE798FF));
    colors.push_back(sf::Color(0xFFE899FF));
    colors.push_back(sf::Color(0xFFE89AFF));
    colors.push_back(sf::Color(0xFFE89BFF));
    colors.push_back(sf::Color(0xFFE89CFF));
    colors.push_back(sf::Color(0xFFE99DFF));
    colors.push_back(sf::Color(0xFFE99EFF));
    colors.push_back(sf::Color(0xFFE99FFF));
    colors.push_back(sf::Color(0xFFE9A0FF));
    colors.push_back(sf::Color(0xFFE9A0FF));
    colors.push_back(sf::Color(0xFFEAA1FF));
    colors.push_back(sf::Color(0xFFEAA2FF));
    colors.push_back(sf::Color(0xFFEAA3FF));
    colors.push_back(sf::Color(0xFFEAA3FF));
    colors.push_back(sf::Color(0xFFEAA4FF));
    colors.push_back(sf::Color(0xFFEBA4FF));
    colors.push_back(sf::Color(0xFFEBA5FF));
    colors.push_back(sf::Color(0xFFEBA6FF));
    colors.push_back(sf::Color(0xFFEBA7FF));
    colors.push_back(sf::Color(0xFFEBA8FF));
    colors.push_back(sf::Color(0xFFECA9FF));
    colors.push_back(sf::Color(0xFFECABFF));
    colors.push_back(sf::Color(0xFFECACFF));
    colors.push_back(sf::Color(0xFFECADFF));
    colors.push_back(sf::Color(0xFFECADFF));
    colors.push_back(sf::Color(0xFFECAEFF));
    colors.push_back(sf::Color(0xFFEDAEFF));
    colors.push_back(sf::Color(0xFFEDAFFF));
    colors.push_back(sf::Color(0xFFEDB0FF));
    colors.push_back(sf::Color(0xFFEDB0FF));
    colors.push_back(sf::Color(0xFFEDB1FF));
    colors.push_back(sf::Color(0xFFEDB2FF));
    colors.push_back(sf::Color(0xFFEDB3FF));
    colors.push_back(sf::Color(0xFFEEB4FF));
    colors.push_back(sf::Color(0xFFEEB4FF));
    colors.push_back(sf::Color(0xFFEEB4FF));
    colors.push_back(sf::Color(0xFFEEB5FF));
    colors.push_back(sf::Color(0xFFEEB6FF));
    colors.push_back(sf::Color(0xFFEEB7FF));
    colors.push_back(sf::Color(0xFFEFB8FF));
    colors.push_back(sf::Color(0xFFEFBAFF));
    colors.push_back(sf::Color(0xFFF0BBFF));
    colors.push_back(sf::Color(0xFFF0BCFF));
    colors.push_back(sf::Color(0xFFF0BDFF));
    colors.push_back(sf::Color(0xFFF0BEFF));
    colors.push_back(sf::Color(0xFFF0BFFF));
    colors.push_back(sf::Color(0xFFF0BFFF));
    colors.push_back(sf::Color(0xFFF1BFFF));
    colors.push_back(sf::Color(0xFFF1C0FF));
    colors.push_back(sf::Color(0xFFF1C1FF));
    colors.push_back(sf::Color(0xFFF1C2FF));
    colors.push_back(sf::Color(0xFFF1C3FF));
    colors.push_back(sf::Color(0xFFF2C4FF));
    colors.push_back(sf::Color(0xFFF2C4FF));
    colors.push_back(sf::Color(0xFFF2C5FF));
    colors.push_back(sf::Color(0xFFF2C6FF));
    colors.push_back(sf::Color(0xFFF2C7FF));
    colors.push_back(sf::Color(0xFFF2C7FF));
    colors.push_back(sf::Color(0xFFF3C9FF));
    colors.push_back(sf::Color(0xFFF3CAFF));
    colors.push_back(sf::Color(0xFFF4CBFF));
    colors.push_back(sf::Color(0xFFF4CCFF));
    colors.push_back(sf::Color(0xFFF4CDFF));
    colors.push_back(sf::Color(0xFFF4CEFF));
    colors.push_back(sf::Color(0xFFF4CFFF));
    colors.push_back(sf::Color(0xFFF5CFFF));
    colors.push_back(sf::Color(0xFFF5D0FF));
    colors.push_back(sf::Color(0xFFF5D1FF));
    colors.push_back(sf::Color(0xFFF5D1FF));
    colors.push_back(sf::Color(0xFFF5D2FF));
    colors.push_back(sf::Color(0xFFF5D3FF));
    colors.push_back(sf::Color(0xFFF5D3FF));
    colors.push_back(sf::Color(0xFFF5D4FF));
    colors.push_back(sf::Color(0xFFF5D4FF));
    colors.push_back(sf::Color(0xFFF6D5FF));
    colors.push_back(sf::Color(0xFFF6D6FF));
    colors.push_back(sf::Color(0xFFF6D8FF));
    colors.push_back(sf::Color(0xFFF6D9FF));
    colors.push_back(sf::Color(0xFFF7DAFF));
    colors.push_back(sf::Color(0xFFF7DBFF));
    colors.push_back(sf::Color(0xFFF7DCFF));
    colors.push_back(sf::Color(0xFFF7DCFF));
    colors.push_back(sf::Color(0xFFF7DDFF));
    colors.push_back(sf::Color(0xFFF7DEFF));
    colors.push_back(sf::Color(0xFFF8DEFF));
    colors.push_back(sf::Color(0xFFF8DFFF));
    colors.push_back(sf::Color(0xFFF8E0FF));
    colors.push_back(sf::Color(0xFFF8E1FF));
    colors.push_back(sf::Color(0xFFF8E2FF));
    colors.push_back(sf::Color(0xFFF9E3FF));
    colors.push_back(sf::Color(0xFFF9E3FF));
    colors.push_back(sf::Color(0xFFF9E3FF));
    colors.push_back(sf::Color(0xFFF9E4FF));
    colors.push_back(sf::Color(0xFFF9E5FF));
    colors.push_back(sf::Color(0xFFFAE6FF));
    colors.push_back(sf::Color(0xFFFAE8FF));
    colors.push_back(sf::Color(0xFFFAE9FF));
    colors.push_back(sf::Color(0xFFFBEBFF));
    colors.push_back(sf::Color(0xFFFBECFF));
    colors.push_back(sf::Color(0xFFFBEDFF));
    colors.push_back(sf::Color(0xFFFBEDFF));
    colors.push_back(sf::Color(0xFFFBEDFF));
    colors.push_back(sf::Color(0xFFFBEEFF));
    colors.push_back(sf::Color(0xFFFCEFFF));
    colors.push_back(sf::Color(0xFFFCEFFF));
    colors.push_back(sf::Color(0xFFFCF0FF));
    colors.push_back(sf::Color(0xFFFCF1FF));
    colors.push_back(sf::Color(0xFFFCF2FF));
    colors.push_back(sf::Color(0xFFFDF3FF));
    colors.push_back(sf::Color(0xFFFDF3FF));
    colors.push_back(sf::Color(0xFFFDF4FF));
    colors.push_back(sf::Color(0xFFFDF5FF));
    colors.push_back(sf::Color(0xFFFDF5FF));
    colors.push_back(sf::Color(0xFFFDF7FF));
    colors.push_back(sf::Color(0xFFFEF8FF));
    sf::RenderWindow window(sf::VideoMode(WIDTH, HEIGHT), "Atomic orbitals");
    sf::Sprite sp;
    sf::RenderTexture rt;
    window.setVerticalSyncEnabled(true);
    rt.create(WIDTH, HEIGHT);
    sp.setTexture(rt.getTexture());
    gen_orbital(rt, colors, 4, 2, 2);
    while (window.isOpen())
    {

        sf::Event ev;
        while (window.pollEvent(ev))
        {
            if (ev.type == sf::Event::Closed)
            {
                window.close();
                break;
            }
           
        }
        window.clear();
        window.draw(sp);
        window.display();
    }
   
    return 0;
}
